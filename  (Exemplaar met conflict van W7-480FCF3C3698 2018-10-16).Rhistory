return(mor)
}
MORS<-boot::boot(data = data, statistic = fit.mor,R = 1000)
fit.mor<-function(x, indices){
fit<-lme4::glmer(formula=as.formula(fit@call[[2]]), data=x[indices], family="binomial")
var<-data.table::data.table(data.frame(lme4::VarCorr(fit)))[grp==grp.var.t,]$vcov
mor<-bgravesteijn::MORcalc(my.var = var)
return(mor)
}
MORS<-boot::boot(data = data, statistic = fit.mor,R = 1000)
as.formula(fit@call[[2]])
fml
str(fml)
fml*,".Environment"
fml(*,".Environment")
fml..-attr(*,".Environment")
formula(fit)
as.character(fml)
paste(as.character(fml))
paste(as.character(fml))
paste(as.character(fml)[c(2,1,3)])
as.formula(paste(as.character(fml)[c(2,1,3)]))
fml<-as.formula(fit@call[[2]])
fit<-lme4::glmer(formula=fml, data=x[indices], family="binomial")
formula<-"EDintubation ~ InjuryHx.TotalISS+(1|country/center)"
fml<-as.formula(formula)
fit<-lme4::glmer(formula=fml, data=x[indices], family="binomial")
fit.mor<-function(x, indices){
fml<-as.formula(formula)
fit<-lme4::glmer(formula=fml, data=x[indices], family="binomial")
var<-data.table::data.table(data.frame(lme4::VarCorr(fit)))[grp==grp.var.t,]$vcov
mor<-bgravesteijn::MORcalc(my.var = var)
return(mor)
}
MORS<-boot::boot(data = data, statistic = fit.mor,R = 1000)
fit<-lme4::glmer(formula=fml, data=x[indices,], family="binomial")
var<-data.table::data.table(data.frame(lme4::VarCorr(fit)))[grp==grp.var.t,]$vcov
mor<-bgravesteijn::MORcalc(my.var = var)
return(mor)
fit.mor<-function(x, indices){
fml<-as.formula(formula)
fit<-lme4::glmer(formula=fml, data=x[indices,], family="binomial")
var<-data.table::data.table(data.frame(lme4::VarCorr(fit)))[grp==grp.var.t,]$vcov
mor<-bgravesteijn::MORcalc(my.var = var)
return(mor)
}
MORS<-boot::boot(data = data, statistic = fit.mor,R = 1000)
data
data[center%in%centersubset,]
mors.list<-vector("list", n.fit)
mors.list
n.fit<-length(data)
n.fit
n.fit<-ifelse(class(data)=="list",length(data),1)
n.fit
MOR.ci.calc <- function (formula=NULL, data=NULL, grp.var.t=NULL){
fit.mor<-function(x, indices){
fml<-as.formula(formula)
fit<-lme4::glmer(formula=fml, data=x[indices,], family="binomial")
var<-data.table::data.table(data.frame(lme4::VarCorr(fit)))[grp==grp.var.t,]$vcov
mor<-bgravesteijn::MORcalc(my.var = var)
return(mor)
}
if(class(data)=="mids"){
data.l<-vector("list", data$m)
for(i in 1:data$m){
data.l[[i]]<-complete(data, i)
}
data<-data.l
}
n.fit<-ifelse(class(data)=="list",length(data),1)
if(n.fit==1){
MORS<-boot::boot(data = data, statistic = fit.mor,R = 1000)
MORS<-MORS$t
}else{
mors.list<-vector("list", n.fit)
for (i in 1:n.fit){
mors<-boot::boot(data=data[[i]], statistic=fit.mor, R=1000)
mors.list[[i]]<-mors$t
}
MORS<-unlist(mors.list)
}
MOR.final<-paste("MOR =",quantile(MORS, probs=0.5),
"(95% CI:", quantile(MORS, probs=0.025), "-", quantile(MORS, probs=0.0975))
return(MOR.final)
}
MOR.ci.calc(formula = "EDintubation ~ age + (1|country)", data = dbi.ih.mice, grp.var.t = "country")
MOR.ci.calc <- function (formula=NULL, data=NULL, grp.var.t=NULL){
fit.mor<-function(x, indices){
fml<-as.formula(formula)
fit<-lme4::glmer(formula=fml, data=x[indices,], family="binomial")
var<-data.table::data.table(data.frame(lme4::VarCorr(fit)))[grp==grp.var.t,]$vcov
mor<-bgravesteijn::MORcalc(my.var = var)
return(mor)
}
if(class(data)=="mids"){
data.l<-vector("list", data$m)
for(i in 1:data$m){
data.l[[i]]<-mice::complete(data, i)
}
data<-data.l
}
n.fit<-ifelse(class(data)=="list",length(data),1)
if(n.fit==1){
MORS<-boot::boot(data = data, statistic = fit.mor,R = 1000)
MORS<-MORS$t
}else{
mors.list<-vector("list", n.fit)
for (i in 1:n.fit){
mors<-boot::boot(data=data[[i]], statistic=fit.mor, R=1000)
mors.list[[i]]<-mors$t
}
MORS<-unlist(mors.list)
}
MOR.final<-paste("MOR =",quantile(MORS, probs=0.5),
"(95% CI:", quantile(MORS, probs=0.025), "-", quantile(MORS, probs=0.0975))
return(MOR.final)
}
MOR.ci.calc(formula = "EDintubation ~ age + (1|country)", data = dbi.ih.mice, grp.var.t = "country")
MOR.ci.calc(formula = "EDintubation ~ Age + (1|country)", data = dbi.ih.mice, grp.var.t = "country")
roxygen2::roxygenize()
bgravesteijn::update.bg()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
#' Compare proportions in categorical variables between observed and imputed data
#' visually (using ggplot)
#'
#' Parameters:
#' @param x x: mids object (from mice)
#' @param x formula: formula describing which variables to plot
#' @param x facet: either "wrap" for facet_wrap or "grid" for facet_grid
#' @param x ...: additional parameters passed to theme()
#' @description This plot is copyright of Nicole Erler. Follow her course at NIHES: missing values. It was an eye-opener for me
probplot <- function(x, formula, facet = "wrap", ...) {
library(plyr)
library(RColorBrewer)
library(ggplot2)
library(reshape2)
cd <- data.frame(mice::complete(x, "long", include = TRUE))
r <- as.data.frame(is.na(x$data))
impcat <- x$meth != "" & sapply(x$data, is.factor)
vnames <- names(impcat)[impcat]
if (missing(formula)) {
formula <- as.formula(paste(paste(vnames, collapse = "+",
sep = ""), "~1", sep = ""))
}
tmsx <- terms(formula[-3], data = x$data)
xnames <- attr(tmsx, "term.labels")
xnames <- xnames[xnames %in% vnames]
if (paste(formula[3]) != "1") {
wvars <- gsub("[[:space:]]*\\|[[:print:]]*", "", paste(formula)[3])
# wvars <- all.vars(as.formula(paste("~", wvars)))
wvars <- attr(terms(as.formula(paste("~", wvars))), "term.labels")
if (grepl("\\|", formula[3])) {
svars <- gsub("[[:print:]]*\\|[[:space:]]*", "", paste(formula)[3])
svars <- all.vars(as.formula(paste("~", svars)))
} else {
svars <- ".imp"
}
} else {
wvars <- NULL
svars <- ".imp"
}
for (i in seq_along(xnames)) {
xvar <- xnames[i]
select <- cd$.imp != 0 & !r[, xvar]
cd[select, xvar] <- NA
}
for (i in which(!wvars %in% names(cd))) {
cd[, wvars[i]] <- with(cd, eval(parse(text = wvars[i])))
}
meltDF <- melt(cd[, c(wvars, svars, xnames)], id.vars = c(wvars, svars))
meltDF <- meltDF[!is.na(meltDF$value), ]
wvars <- if (!is.null(wvars)) paste0("`", wvars, "`")
a <- ddply(meltDF, c(wvars, svars, "variable", "value"), summarize,
count = length(value))
b <- ddply(meltDF, c(wvars, svars, "variable"), summarize,
tot = length(value))
mdf <- merge(a,b)
mdf$prop <- mdf$count / mdf$tot
plotDF <- merge(unique(meltDF), mdf)
plotDF$value <- factor(plotDF$value,
levels = unique(unlist(lapply(x$data[, xnames], levels))),
ordered = T)
p <- ggplot(plotDF, aes(x = value, fill = get(svars), y = prop)) +
geom_bar(position = "dodge", stat = "identity") +
theme(legend.position = "bottom", ...) +
ylab("proportion") +
scale_fill_manual(name = "",
values = c("black",
colorRampPalette(
brewer.pal(9, "Blues"))(x$m + 3)[1:x$m + 3])) +
guides(fill = guide_legend(nrow = 1))
if (facet == "wrap")
if (length(xnames) > 1) {
print(p + facet_wrap(c("variable", wvars), scales = "free"))
} else {
if (is.null(wvars)) {
print(p)
} else {
print(p + facet_wrap(wvars, scales = "free"))
}
}
if (facet == "grid")
if (!is.null(wvars)) {
print(p + facet_grid(paste(paste(wvars, collapse = "+"), "~ variable"),
scales = "free"))
}
}
roxygen2::roxygenise()
roxygen2::roxygenize()
bgravesteijn::update.bg()
knitr::opts_chunk$set(echo = TRUE)
setwd("C://Users/Gebruiker/Dropbox/CC02 R project/Practical regression/")
setwd("C://Users/Gebruiker/Dropbox/CC02 R project/Practical regression/")
library(foreign) #load the package
df<-read.spss(file = "Data/BLDPRES.SAV", to.data.frame = TRUE) #import your own datafile
#a
df<-read.spss(file = "Data/BLDPRES.SAV", to.data.frame = TRUE) #import your own datafile
df$sex
#b
df.w<-df[df$sex=="female",]
fit<-lm(sys~age, data=df.w)
plot(y=df.w$sys, x=df.w$age)
plot(y=df.w$sys, x=df.w$age)
abline(fit, col="red")
abline(fit, col="red", se=TRUE)
plot(y=df.w$sys, x=df.w$age)
abline(fit, col="red", se=TRUE)
#d
predict(fit, se.fit = TRUE)
predict(fit, se.fit = TRUE)
#d
se<-predict(fit, se.fit = TRUE)
#d
se<-predict(fit, se.fit = TRUE)$se.fit
mean<-predict(fit)$fit
mean<-predict(fit)$'fit'
mean<-predict(fit)
predict(fit)
mean<-predict(fit)
qt(0.975, n-2)
se<-predict(fit, se.fit = TRUE)$se.fit
mean<-predict(fit)
lo<-mean-1.96*se
hi<-mean+1.96*se
plot(y=hi, x=df.w$age, type="l", l.type=2)
plot(y=hi, x=df.w$age, type="l"")
plot(y=hi, x=df.w$age, type="l")
plot(y=hi, x=df.w$age, type="l")
plot(y=df.w$sys, x=df.w$age)
abline(hi)
hi
plot(y=df.w$sys, x=df.w$age)
plot(y=df.w$sys, x=df.w$age, ylim=80,200)
plot(y=df.w$sys, x=df.w$age, ylim=c(80,200))
plot(y=df.w$sys, x=df.w$age, ylim=c(90,200))
abline(fit, col="red")
plot(y=lo, x=df.w$age, ylim=c(90,200), type="l")
#d
library(ggplot2)
ggplot(df.w, aes(y=sys, x=age))+geom_smooth(method = "lm")
#a
df<-read.spss(file = "Data/BLDPRES.SAV", to.data.frame = TRUE) #import your own datafile
#b
df.w<-df[df$sex=="female",]
fit<-lm(sys~age, data=df.w)
plot(y=df.w$sys, x=df.w$age)
abline(fit, col="red")
#c
summary(fit)
#d
library(ggplot2)
ggplot(df.w, aes(y=sys, x=age))+geom_smooth(method = "lm")
ggplot(df.w, aes(y=sys, x=age))+geom_point()+geom_smooth(method = "lm")
#a
df<-read.spss(file = "Data/BLDPRES.SAV", to.data.frame = TRUE) #import your own datafile
#b
df.w<-df[df$sex=="female",]
fit<-lm(sys~age, data=df.w)
plot(y=df.w$sys, x=df.w$age)
abline(fit, col="red")
#c
summary(fit)
#d
library(ggplot2)
ggplot(df.w, aes(y=sys, x=age))+geom_point()+geom_smooth(method = "lm")
0.5-1.96*0.077
0.5+1.96*0.077
#e
plot(fit)
###################################################
#  part a                                         #
###################################################
df.m<-df[df$sex=="men",]
fit.m<-lm(sys~age, data=df.m)
###################################################
#  part a                                         #
###################################################
df.m<-df[df$sex=="men",]
df.m
df$sex
###################################################
#  part a                                         #
###################################################
df.m<-df[df$sex=="male",]
fit.m<-lm(sys~age, data=df.m)
plot(y=df.m$sys,x=df.m$age)
abline(fit.m, col="red")
plot(y=df.m$sys,x=df.m$age)
abline(fit.m, col="red")
###################################################
#  part a                                         #
###################################################
plot(y=df$sys, x=df$age)
plot(y=df$sys, x=df$age)
abline(fit.w, col="red")
#a
library(foreign) #load the package
df<-read.spss(file = "Data/BLDPRES.SAV", to.data.frame = TRUE) #import your own datafile
#b
df.w<-df[df$sex=="female",]
fit.w<-lm(sys~age, data=df.w)
plot(y=df.w$sys, x=df.w$age)
abline(fit.w, col="red")
#c
summary(fit.w)
#d
library(ggplot2)
ggplot(df.w, aes(y=sys, x=age))+geom_point()+geom_smooth(method = "lm")
#e
plot(fit.w)
###################################################
#  part a                                         #
###################################################
df.m<-df[df$sex=="male",]
fit.m<-lm(sys~age, data=df.m)
plot(y=df.m$sys,x=df.m$age)
abline(fit.m, col="red")
summary(fit.m)
plot(fit.m)
###################################################
#  part a                                         #
###################################################
plot(y=df$sys, x=df$age)
abline(fit.w, col="red")
abline(fit.m, col="green")
legend("upperleft", legend = c("Female", "Male"), col=c("red", "green"))
###################################################
plot(y=df$sys, x=df$age)
abline(fit.w, col="red")
abline(fit.m, col="green")
legend("upperleft", legend = c("Female", "Male"), col=c("red", "green"))
knitr::opts_chunk$set(echo = TRUE)
setwd("C://Users/Gebruiker/Dropbox/CC02 R project/Practical regression/")
#a
library(foreign)
read.spss("Data/grrtx.sav")
#a
library(foreign)
read.spss("Data/grrtx.sav")
#a
library(foreign)
df<-read.spss("Data/grrtx.sav")
#a
library(foreign)
df<-read.spss("Data/grrtx.sav")
#b
plot(y=df$FINALHT, x=df$TARHT)
max(df$TARHT)
#a
library(foreign)
df<-read.spss("Data/grrtx.sav")
#b
plot(y=df$FINALHT, x=df$TARHT)
#c
plot(y=df$HTSDSTX, x=df$HTSDSHD)
plot(y=df$CUMPDDOS, x=df$AGETX)
plot(y=df$FINALHT, x=df$DURHD)
df[df$TARHT==999,]<-NA
df[df$TARHT==999,]
df$TARHT
#b
plot(y=df$FINALHT, x=df$TARHT)
max(df$TARHT)
df[df$TARHT==999,]
df$TARHT==999
summary(df$TARHT)
df$TARHT
which(df$TARHT==max(df$TARHT))
df$TARHT[which(df$TARHT==max(df$TARHT))]<-NA
#a
library(foreign)
df<-read.spss("Data/grrtx.sav")
setwd("C://Users/Gebruiker/Dropbox/CC02 R project/Practical regression/")
setwd("C://Users/Gebruiker/Dropbox/CC02 R project/Practical regression/")
#a
library(foreign)
df<-read.spss("Practical regression/Data/")
#a
library(foreign)
df<-read.spss("Practical regression/Data/grrtx.sav")
#b
plot(y=df$FINALHT, x=df$TARHT)
max(df$TARHT)
df$TARHT[which(df$TARHT==max(df$TARHT))]<-NA
plot(y=df$FINALHT, x=df$TARHT)
#c
plot(y=df$HTSDSTX, x=df$HTSDSHD)
plot(y=df$CUMPDDOS, x=df$AGETX)
plot(y=df$FINALHT, x=df$DURHD)
###################################################
#  part a                                         #
###################################################
cor.1<-cor(y=df$FINALHT, x=df$TARHT, use = "pairwise.complete.obs", method="pearson")
#a
cor.1<-cor(y=df$FINALHT, x=df$TARHT, use = "pairwise.complete.obs", method="pearson")
cor.test(cor.1)
cor.1
cor.test(y=df$FINALHT, x=df$TARHT)
cor.test(y=df$FINALHT, x=df$TARHT, method="pearson")
cor.test(y=df$FINALHT, x=df$TARHT, method="spearman")
cor.test(y=df$FINALHT, x=df$TARHT, method="pearson")
#a
cor.test(y=df$FINALHT, x=df$TARHT, method="pearson", use = "pairwise.complete.obs")
cor.test(y=df$HTSDSTX, x=df$HTSDSHD, method="pearson", use = "pairwise.complete.obs")
cor.test(y=df$CUMPDDOS, x=df$AGETX, method="pearson", use = "pairwise.complete.obs")
cor.test(y=df$FINALHT, x=df$DURHD, method="pearson", use = "pairwise.complete.obs")
#a
cor.test(y=df$FINALHT, x=df$TARHT, method="pearson", use = "pairwise.complete.obs")
cor.test(y=df$HTSDSTX, x=df$HTSDSHD, method="pearson", use = "pairwise.complete.obs")
cor.test(y=df$CUMPDDOS, x=df$AGETX, method="pearson", use = "pairwise.complete.obs")
cor.test(y=df$FINALHT, x=df$DURHD, method="spearman", use = "pairwise.complete.obs")
knitr::opts_chunk$set(echo = TRUE)
setwd("C://Users/Gebruiker/Dropbox/CC02 R project/Practical regression/")
load("C://Users/Gebruiker/Desktop/fm.lme.RData")
library(ggplot2)
library(mitools)
MORcalc <- function(my.var, digits = 2)
{ # MOR arguments: my.var = variance associated with level 2 clustering variable
# digits = number of decimal places to which MOR value will be rounded.
Median.OR <- round(exp(sqrt(2*my.var)*qnorm(.75)), digits)
return(Median.OR)}
length_list<-length(x)
#grp = vector of the grouping variable, e.g. countries/schools...
#re = vector of the random effects for each value of the grp variable
#condvar = vector of the conditional variances of the random effects of the grouping variable
#xlab = character indicating type of grouping variable, e.g.: "country"
MOR<-rep(NA, length(x))
x<-fme.lme
x<-fm.lme
MORcalc <- function(my.var, digits = 2)
{ # MOR arguments: my.var = variance associated with level 2 clustering variable
# digits = number of decimal places to which MOR value will be rounded.
Median.OR <- round(exp(sqrt(2*my.var)*qnorm(.75)), digits)
return(Median.OR)}
length_list<-length(x)
#grp = vector of the grouping variable, e.g. countries/schools...
#re = vector of the random effects for each value of the grp variable
#condvar = vector of the conditional variances of the random effects of the grouping variable
#xlab = character indicating type of grouping variable, e.g.: "country"
MOR<-rep(NA, length(x))
x<-fm.lme$analyses
MORcalc <- function(my.var, digits = 2)
{ # MOR arguments: my.var = variance associated with level 2 clustering variable
# digits = number of decimal places to which MOR value will be rounded.
Median.OR <- round(exp(sqrt(2*my.var)*qnorm(.75)), digits)
return(Median.OR)}
length_list<-length(x)
#grp = vector of the grouping variable, e.g. countries/schools...
#re = vector of the random effects for each value of the grp variable
#condvar = vector of the conditional variances of the random effects of the grouping variable
#xlab = character indicating type of grouping variable, e.g.: "country"
MOR<-rep(NA, length(x))
re.no<-which(data.frame(lme4::VarCorr(x[[1]], which=grp.var.t))$grp==grp.var.t)
lme4::VarCorr(x[[1]], which=grp.var.t)
data.frame(lme4::VarCorr(x[[1]], which=grp.var.t))
lme4::VarCorr(x, which=grp.var.t)
lme4::VarCorr(x[[1]], which=grp.var.t)
condval<-matrix(data = rep(NA, length_grp*length_list), ncol = length_list)
if(length_list==1){
length_grp<-length(data.frame(lme4::ranef(x, which=grp.var.t))$grp)
}else{
length_grp<-length(data.frame(lme4::ranef(x[[1]], which=grp.var.t))$grp)
}
condval<-matrix(data = rep(NA, length_grp*length_list), ncol = length_list)
condval
sd<-matrix(data = rep(NA, length_grp*length_list), ncol = length_list)
sd
grp.var.t<-"clus"
for (i in 1:length_list){
condval[,i]<-data.frame(lme4::ranef(x[[i]], which=grp.var.t, condVar=TRUE))$condval
sd[,i]<-data.frame(lme4::ranef(x[[i]], which=grp.var.t, condVar=TRUE))$condsd
MOR[i]<-MORcalc(data.frame(lme4::VarCorr(x[[i]]))[re.no,]$sdcor^2)
}
lme4::ranef(x[[i]], which=grp.var.t, condVar=TRUE)
i
length_grp
length(lme4::ranef(x[[1]], which=grp.var.t))
length(lme4::ranef(x[[1]]))
lme4::ranef(x[[1]])
if(length_list==1){
length_grp<-nrow(lme4::ranef(x))
}else{
length_grp<-nrow(lme4::ranef(x[[1]]))
}
length_grp
condval<-matrix(data = rep(NA, length_grp*length_list), ncol = length_list)
sd<-matrix(data = rep(NA, length_grp*length_list), ncol = length_list)
roxygen2::roxygenise()
bgravesteijn::update.bg()
